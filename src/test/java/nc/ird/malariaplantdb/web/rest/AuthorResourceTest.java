package nc.ird.malariaplantdb.web.rest;

// Disable this autogenerated test because it fails with the DB constraints

/**
 * Test class for the AuthorResource REST controller.
 *
 * @see AuthorResource
 */
//@RunWith(SpringJUnit4ClassRunner.class)
//@SpringApplicationConfiguration(classes = Application.class)
//@WebAppConfiguration
//@IntegrationTest
//public class AuthorResourceTest {
//
//    private static final String DEFAULT_FAMILY = "SAMPLE_TEXT";
//    private static final String UPDATED_FAMILY = "UPDATED_TEXT";
//    private static final String DEFAULT_GIVEN = "SAMPLE_TEXT";
//    private static final String UPDATED_GIVEN = "UPDATED_TEXT";
//
//    @Inject
//    private AuthorRepository authorRepository;
//
//    @Inject
//    private AuthorSearchRepository authorSearchRepository;
//
//    @Inject
//    private MappingJackson2HttpMessageConverter jacksonMessageConverter;
//
//    @Inject
//    private PageableHandlerMethodArgumentResolver pageableArgumentResolver;
//
//    private MockMvc restAuthorMockMvc;
//
//    private Author author;
//
//    @PostConstruct
//    public void setup() {
//        MockitoAnnotations.initMocks(this);
//        AuthorResource authorResource = new AuthorResource();
//        ReflectionTestUtils.setField(authorResource, "authorRepository", authorRepository);
//        ReflectionTestUtils.setField(authorResource, "authorSearchRepository", authorSearchRepository);
//        this.restAuthorMockMvc = MockMvcBuilders.standaloneSetup(authorResource)
//            .setCustomArgumentResolvers(pageableArgumentResolver)
//            .setMessageConverters(jacksonMessageConverter).build();
//    }
//
//    @Before
//    public void initTest() {
//        author = new Author();
//        author.setFamily(DEFAULT_FAMILY);
//        author.setGiven(DEFAULT_GIVEN);
//    }
//
//    @Test
//    @Transactional
//    public void createAuthor() throws Exception {
//        int databaseSizeBeforeCreate = authorRepository.findAll().size();
//
//        // Create the Author
//
//        restAuthorMockMvc.perform(post("/api/authors")
//                .contentType(TestUtil.APPLICATION_JSON_UTF8)
//                .content(TestUtil.convertObjectToJsonBytes(author)))
//                .andExpect(status().isCreated());
//
//        // Validate the Author in the database
//        List<Author> authors = authorRepository.findAll();
//        assertThat(authors).hasSize(databaseSizeBeforeCreate + 1);
//        Author testAuthor = authors.get(authors.size() - 1);
//        assertThat(testAuthor.getFamily()).isEqualTo(DEFAULT_FAMILY);
//        assertThat(testAuthor.getGiven()).isEqualTo(DEFAULT_GIVEN);
//    }
//
//    @Test
//    @Transactional
//    public void checkFamilyIsRequired() throws Exception {
//        int databaseSizeBeforeTest = authorRepository.findAll().size();
//        // set the field null
//        author.setFamily(null);
//
//        // Create the Author, which fails.
//
//        restAuthorMockMvc.perform(post("/api/authors")
//                .contentType(TestUtil.APPLICATION_JSON_UTF8)
//                .content(TestUtil.convertObjectToJsonBytes(author)))
//                .andExpect(status().isBadRequest());
//
//        List<Author> authors = authorRepository.findAll();
//        assertThat(authors).hasSize(databaseSizeBeforeTest);
//    }
//
//    @Test
//    @Transactional
//    public void getAllAuthors() throws Exception {
//        // Initialize the database
//        authorRepository.saveAndFlush(author);
//
//        // Get all the authors
//        restAuthorMockMvc.perform(get("/api/authors"))
//                .andExpect(status().isOk())
//                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
//                .andExpect(jsonPath("$.[*].id").value(hasItem(author.getId().intValue())))
//                .andExpect(jsonPath("$.[*].family").value(hasItem(DEFAULT_FAMILY.toString())))
//                .andExpect(jsonPath("$.[*].given").value(hasItem(DEFAULT_GIVEN.toString())));
//    }
//
//    @Test
//    @Transactional
//    public void getAuthor() throws Exception {
//        // Initialize the database
//        authorRepository.saveAndFlush(author);
//
//        // Get the author
//        restAuthorMockMvc.perform(get("/api/authors/{id}", author.getId()))
//            .andExpect(status().isOk())
//            .andExpect(content().contentType(MediaType.APPLICATION_JSON))
//            .andExpect(jsonPath("$.id").value(author.getId().intValue()))
//            .andExpect(jsonPath("$.family").value(DEFAULT_FAMILY.toString()))
//            .andExpect(jsonPath("$.given").value(DEFAULT_GIVEN.toString()));
//    }
//
//    @Test
//    @Transactional
//    public void getNonExistingAuthor() throws Exception {
//        // Get the author
//        restAuthorMockMvc.perform(get("/api/authors/{id}", Long.MAX_VALUE))
//                .andExpect(status().isNotFound());
//    }
//
//    @Test
//    @Transactional
//    public void updateAuthor() throws Exception {
//        // Initialize the database
//        authorRepository.saveAndFlush(author);
//
//		int databaseSizeBeforeUpdate = authorRepository.findAll().size();
//
//        // Update the author
//        author.setFamily(UPDATED_FAMILY);
//        author.setGiven(UPDATED_GIVEN);
//
//
//        restAuthorMockMvc.perform(put("/api/authors")
//                .contentType(TestUtil.APPLICATION_JSON_UTF8)
//                .content(TestUtil.convertObjectToJsonBytes(author)))
//                .andExpect(status().isOk());
//
//        // Validate the Author in the database
//        List<Author> authors = authorRepository.findAll();
//        assertThat(authors).hasSize(databaseSizeBeforeUpdate);
//        Author testAuthor = authors.get(authors.size() - 1);
//        assertThat(testAuthor.getFamily()).isEqualTo(UPDATED_FAMILY);
//        assertThat(testAuthor.getGiven()).isEqualTo(UPDATED_GIVEN);
//    }
//
//    @Test
//    @Transactional
//    public void deleteAuthor() throws Exception {
//        // Initialize the database
//        authorRepository.saveAndFlush(author);
//
//		int databaseSizeBeforeDelete = authorRepository.findAll().size();
//
//        // Get the author
//        restAuthorMockMvc.perform(delete("/api/authors/{id}", author.getId())
//                .accept(TestUtil.APPLICATION_JSON_UTF8))
//                .andExpect(status().isOk());
//
//        // Validate the database is empty
//        List<Author> authors = authorRepository.findAll();
//        assertThat(authors).hasSize(databaseSizeBeforeDelete - 1);
//    }
//}
